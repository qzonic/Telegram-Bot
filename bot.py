import config
from DB import BotDB
from Parser.parser import *
import logging
from aiogram import Bot, Dispatcher, executor, types
import os
import random
from prettytable import PrettyTable
from aiogram.dispatcher.filters import Text


# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands="start")
async def start(message: types.Message):
    db = BotDB('main.db')
    try:
        user_name = message.from_user.username
    except:
        user_name = None
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id, user_name)
    sti = open('img/sticker.webp', 'rb')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton("–ü–æ–º–æ—â—å ‚ùì")
    markup.add(item)
    await message.answer_sticker(sti, reply_markup=markup)
    sti.close()

@dp.message_handler(commands=('search', 's'))
async def search(message: types.Message):
    db = BotDB('main.db')
    game = ' '.join(message.text.lower().split()[1:])
    db.add_command(message.from_user.id, ' '.join(message.text.split()[1:]))
    db.close()

    try:
        await big_parser(message=message, game=game, PARSER=ZakaZakaParser, shop="Zaka-Zaka")
        await big_parser(message=message, game=game, PARSER=SteamAccountParser, shop="Steam Account")
        await big_parser(message=message, game=game, PARSER=SteamPayParser, shop="Steam Pay")
        await big_parser(message=message, game=game, PARSER=SteamBuyParser, shop="Steam Buy")
        file = open(os.path.join('img', random.choice(os.listdir('img'))), 'rb')
        await message.answer_sticker(file)
        file.close()
    except:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ ‚ùó")


@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    db = BotDB('main.db')
    status = db.get_user_status(message.from_user.id)
    if status == "ADMIN":
        if message.text.lower().split()[1:][0] == "on":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if db.in_admin_status(message.from_user.id) == 0:
                db.change_in_admin_status(message.from_user.id, 1)
                item1 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìñ")
                item2 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìÉ")
                item3 = types.KeyboardButton("‚ùå OFF ‚ùå")
                markup.row(item1, item2)
                markup.row(item3)
                await message.answer("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω‚ùó‚ùó‚ùó", reply_markup=markup)
            elif db.in_admin_status(message.from_user.id) == 1:
                await message.answer("–í—ã –∏ —Ç–∞–∫ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚ùó", reply_markup=markup)
        elif message.text.lower().split()[1:][0] == "off":
            if db.in_admin_status(message.from_user.id) == 1:
                db.change_in_admin_status(message.from_user.id, 0)
                await message.answer(reply_markup=types.ReplyKeyboardRemove(), text="–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω‚ùó‚ùó‚ùó")
            elif db.in_admin_status(message.from_user.id) == 0:
                await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif status == "USER":
        await message.answer(text="–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢")
    return db.close()

@dp.message_handler(commands=['change', 'c'])
async def change(message: types.Message):
    db = BotDB('main.db')
    status = db.get_user_status(message.from_user.id)
    if status == "ADMIN":
        if db.in_admin_status(message.from_user.id) == 1:
            msg = message.text.split()[1:]
            if len(msg) == 2 and msg[0].isdigit() and msg[1] in ['admin', 'user']:
                user_id, new_status = msg
                if db.user_exists(user_id) == True:
                    db.change_user_status(user_id=user_id, new_status=new_status)
                    await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
                elif db.user_exists(user_id) == False:
                    await message.answer("ID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
        elif db.in_admin_status(message.from_user.id) == 0:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif status == "USER":
        await message.answer(text="–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢")
    return db.close()


async def big_parser(message, game, PARSER, shop):
    Shop = PARSER(game=game).parse()

    if Shop == [] or Shop == "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç":
        final_result = f"‚ùå {shop}: –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ :("
        return await message.answer(final_result)
    else:
        markup = types.InlineKeyboardMarkup()
        for i in Shop:
            btn = types.InlineKeyboardButton(text=f'{i[0]} - {i[1]} —Ä—É–±.', url=i[2])
            markup.add(btn)
        return await message.answer(f"‚úÖ {shop}", reply_markup=markup)

@dp.message_handler(Text(equals="‚ùå OFF ‚ùå"))
async def quit(message: types.Message):
    db = BotDB("main.db")
    if db.in_admin_status(message.from_user.id) == 1:
        db.change_in_admin_status(message.from_user.id, 0)
        await message.answer("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω‚ùó‚ùó‚ùó", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    return db.close()


@dp.message_handler(Text(equals="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìÉ"))
async def commands_list(message: types.Message):
    db = BotDB("main.db")
    status = db.get_user_status(message.from_user.id)
    if status == "ADMIN":
        if db.in_admin_status(message.from_user.id) == 1:
            table = PrettyTable()
            table.field_names = ["User ID", "Username",  "Command", "Time"]
            for i in db.get_all_commands():
                table.add_row(i)
            if len(str(table)) > 4096:
                for i in range(0, len(str(table)), 4096):
                    await message.answer(f"<pre>{str(table)[i:i + 4096]}</pre>", parse_mode="HTML")
            else:
                await message.answer(f"<pre>{table}</pre>", parse_mode="HTML")
        elif db.in_admin_status(message.from_user.id) == 0:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif status == "USER":
        await message.answer(text="–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢")
    return db.close()

@dp.message_handler(Text(equals="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìñ"))
async def users_list(message: types.Message):
    db = BotDB('main.db')
    status = db.get_user_status(message.from_user.id)
    if status == "ADMIN":
        if db.in_admin_status(message.from_user.id) == 1:
            table = PrettyTable()
            table.field_names = ["User ID", "Username", "Join time"]
            for i in db.get_all_users():
                table.add_row(i)
            if len(str(table)) > 4096:
                for i in range(0, len(str(table)), 4096):
                    await message.answer(f"<pre>{str(table)[i:i + 4096]}</pre>", parse_mode="HTML")
            else:
                await message.answer(f"<pre>{table}</pre>", parse_mode="HTML")
        elif db.in_admin_status(message.from_user.id) == 0:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif status == "USER":
        await message.answer(text="–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢")
    return db.close()

@dp.message_handler(content_types=['text'])
async def lalala(message: types.Message):
    help_text = """
–î–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ:
/search –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
/s –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
–û–∂–∏–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö!
"""
    if message.chat.type == 'private':
        if message.text == '–ü–æ–º–æ—â—å ‚ùì':
            await message.reply(help_text)



if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)